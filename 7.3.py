# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение (__add__()). Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание (__sub__()). Участвуют две клетки.
# Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение (__mul__()). Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление (__truediv__()). Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
class Cell:
    def __init__(self, nucleus):
        self.nucleus = nucleus

    def __add__(self, other):
        return Cell(self.nucleus + other.nucleus)

    def __sub__(self, other):
        if self.nucleus != other.nucleus:
            return Cell(abs(self.nucleus - other.nucleus))
        else:
            return f'Одинаковые клетки нельзя вычитать'

    def __mul__(self, other):
        return Cell(self.nucleus * other.nucleus)

    def __truediv__(self, other):
        return Cell(self.nucleus // other.nucleus)

    def __str__(self):
        return f'{self.nucleus}'

    def make_order(self):
        pic = []
        nucleus_in_line = int(input('Сколько ячеек в ряду: '))
        lines = self.nucleus // nucleus_in_line
        res = self.nucleus % nucleus_in_line
        for el in range(lines):
            el = '*' * nucleus_in_line
            pic.append(el)
        pic.append((res * '*'))
        pic = '\n'.join(pic)
        return pic


bac_1 = Cell(int(input('Введите число ячеек в первой клетке: ')))
bac_2 = Cell(int(input('Введите число ячеек во второй клетке: ')))

print(f'Сложение клеток: {bac_1 + bac_2}')
print(f'Разница между клетками клеток: {bac_1 - bac_2}')
print(f'Умножение клеток: {bac_1 * bac_2}')
print(f'Деление клеток: {bac_1 / bac_2}')
print(f'Вид первой бактерии:\n{bac_1.make_order()}')
print(f'Вид второй бактерии:\n{bac_2.make_order()}')
